<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:osgi="http://www.springframework.org/schema/osgi"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						http://www.springframework.org/schema/osgi http://www.springframework.org/schema/osgi/spring-osgi-1.2.xsd 
						http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- 
		Create a JMS endpoint for use by the camel providers in creating routes.
		Camel OSGi will scan the spring context for beans so you don't have to worry about why this isn't injected anywhere.
		I can sense your stress...stop it.
	 -->
	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://localhost:61616" />
			</bean>
		</property>
	</bean>

	
	
	<!--
		Create a camel parameter provider service factory bean for use by the services-context.xml 
		(Spring DM).
	-->
	<bean id="camelParameterProviderServiceFactory"
		  class="org.hbird.rcpgui.camelparameterprovider.CamelParameterProviderServiceFactory">
		  <property name="parameterSourceUri" value="jms:decodedTelemetryPayloads"></property>
	</bean>
	
		

	<!--
		The camel context used by OSGi camel services to host routes. 
		The CamelParameterProviderServiceFactory is CamelContext aware so it will be injected with a reference to this.
		All camel provider instances will share this context.
	 -->
	<camel:camelContext id="camelContextBean">
	</camel:camelContext>

</beans>